// Add these endpoints to your Railway backend (Express.js)

const express = require('express');
const { createClient } = require('@supabase/supabase-js');
const app = express();

// Initialize Supabase
const supabase = createClient(
  process.env.SUPABASE_URL,
  process.env.SUPABASE_SERVICE_ROLE_KEY
);

// Middleware
app.use(express.json());
app.use(cors({
  origin: ['https://enrollment.getmydpc.com', 'http://localhost:3000'],
  credentials: true
}));

// 1. MISSING ENDPOINT: /api/registration
app.post('/api/registration', async (req, res) => {
  try {
    console.log('Registration request:', req.body);
    
    const {
      email,
      password,
      firstName,
      lastName,
      phone,
      termsAccepted,
      privacyAccepted,
      smsConsent,
      faqDownloaded
    } = req.body;

    // Validate required fields
    if (!email || !password || !firstName || !lastName) {
      return res.status(400).json({
        error: 'Missing required fields',
        details: 'Email, password, first name, and last name are required'
      });
    }

    // Create user in Supabase Auth
    const { data: authData, error: authError } = await supabase.auth.admin.createUser({
      email,
      password,
      email_confirm: true, // Auto-confirm for DPC enrollment
      user_metadata: {
        first_name: firstName,
        last_name: lastName,
        phone: phone
      }
    });

    if (authError) {
      console.error('Supabase auth error:', authError);
      return res.status(400).json({
        error: 'Registration failed',
        details: authError.message
      });
    }

    // Store additional registration data
    const { data: profileData, error: profileError } = await supabase
      .from('user_profiles')
      .insert({
        user_id: authData.user.id,
        email,
        first_name: firstName,
        last_name: lastName,
        phone,
        terms_accepted: termsAccepted,
        privacy_accepted: privacyAccepted,
        sms_consent: smsConsent,
        faq_downloaded: faqDownloaded,
        registration_date: new Date().toISOString(),
        enrollment_status: 'pending'
      });

    if (profileError) {
      console.error('Profile creation error:', profileError);
      // Don't fail registration if profile insert fails
    }

    res.json({
      success: true,
      message: 'Registration successful',
      user: {
        id: authData.user.id,
        email: authData.user.email,
        firstName,
        lastName
      }
    });

  } catch (error) {
    console.error('Registration error:', error);
    res.status(500).json({
      error: 'Internal server error',
      details: error.message
    });
  }
});

// 2. MISSING ENDPOINT: /api/agent/enrollment
app.post('/api/agent/enrollment', async (req, res) => {
  try {
    const { agentCode, userEmail, planType } = req.body;
    
    // TODO: Implement agent enrollment logic
    // For now, return success
    res.json({
      success: true,
      message: 'Agent enrollment recorded',
      agentCode,
      userEmail,
      planType
    });
    
  } catch (error) {
    res.status(500).json({
      error: 'Agent enrollment failed',
      details: error.message
    });
  }
});

// 3. MISSING ENDPOINT: /api/agent/... (agent lookup/validation)
app.get('/api/agent/:agentId', async (req, res) => {
  try {
    const { agentId } = req.params;
    
    // TODO: Implement agent validation
    // For now, return mock data
    res.json({
      success: true,
      agent: {
        id: agentId,
        name: 'Agent Name',
        active: true
      }
    });
    
  } catch (error) {
    res.status(500).json({
      error: 'Agent lookup failed',
      details: error.message
    });
  }
});

// 4. ERROR HANDLING MIDDLEWARE
app.use((err, req, res, next) => {
  console.error('Unhandled error:', err);
  res.status(500).json({
    error: 'Internal server error',
    details: process.env.NODE_ENV === 'development' ? err.message : 'Something went wrong'
  });
});

// 5. 404 HANDLER
app.use('*', (req, res) => {
  console.log(`404 - Missing endpoint: ${req.method} ${req.originalUrl}`);
  res.status(404).json({
    error: 'Endpoint not found',
    endpoint: req.originalUrl,
    method: req.method,
    availableEndpoints: [
      'POST /api/registration',
      'POST /api/agent/enrollment',
      'GET /api/agent/:agentId',
      'POST /api/auth/login'
    ]
  });
});

const PORT = process.env.PORT || 3001;
app.listen(PORT, () => {
  console.log(`MyPremierPlans API server running on port ${PORT}`);
});

module.exports = app;