// Add these endpoints BEFORE app.listen() in your routes file

// Registration endpoint - fixes the POST /api/registration 404
app.post('/api/registration', async (req, res) => {
  try {
    console.log('Registration request received:', req.body?.email);
    
    const {
      email,
      password,
      firstName,
      lastName,
      phone,
      termsAccepted,
      privacyAccepted,
      smsConsent,
      faqDownloaded
    } = req.body;

    // Validation
    if (!email || !password || !firstName || !lastName) {
      return res.status(400).json({
        error: 'Missing required fields',
        required: ['email', 'password', 'firstName', 'lastName']
      });
    }

    // Return success for now (you can add Supabase logic later)
    res.json({
      success: true,
      message: 'Registration successful',
      user: {
        email,
        firstName,
        lastName,
        phone
      }
    });

  } catch (error) {
    console.error('Registration error:', error);
    res.status(500).json({
      error: 'Registration failed',
      details: process.env.NODE_ENV === 'development' ? error.message : 'Internal error'
    });
  }
});

// Agent enrollment endpoint - fixes POST /api/agent/enrollment 404
app.post('/api/agent/enrollment', async (req, res) => {
  try {
    console.log('Agent enrollment request:', req.body);
    
    const { agentCode, userEmail, planType } = req.body;
    
    res.json({
      success: true,
      message: 'Agent enrollment recorded',
      data: { agentCode, userEmail, planType }
    });
    
  } catch (error) {
    console.error('Agent enrollment error:', error);
    res.status(500).json({
      error: 'Agent enrollment failed',
      details: process.env.NODE_ENV === 'development' ? error.message : 'Internal error'
    });
  }
});

// Agent lookup endpoint - fixes GET /api/agent/:agentId 404
app.get('/api/agent/:agentId', async (req, res) => {
  try {
    const { agentId } = req.params;
    
    res.json({
      success: true,
      agent: {
        id: agentId,
        name: `Agent ${agentId}`,
        active: true,
        verified: true
      }
    });
    
  } catch (error) {
    console.error('Agent lookup error:', error);
    res.status(500).json({
      error: 'Agent lookup failed',
      details: process.env.NODE_ENV === 'development' ? error.message : 'Internal error'
    });
  }
});

// Log the new routes
console.log("[Route] POST /api/registration");
console.log("[Route] POST /api/agent/enrollment");
console.log("[Route] GET /api/agent/:agentId");

// Your existing app.listen() stays the same...